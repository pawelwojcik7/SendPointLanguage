package send.point.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_PostWoman;
  private ConceptPresentation props_SendPoint;
  private ConceptPresentation props_SendPointAddress;
  private ConceptPresentation props_SendPointBody;
  private ConceptPresentation props_SendPointButton;
  private ConceptPresentation props_SendPointMethod;
  private ConceptPresentation props_SendPointParameter;
  private ConceptPresentation props_SendPointPathVariable;
  private ConceptPresentation props_SendPointResponseBody;
  private ConceptPresentation props_SendPointResponseStatus;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.PostWoman:
        if (props_PostWoman == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PostWoman = cpb.create();
        }
        return props_PostWoman;
      case LanguageConceptSwitch.SendPoint:
        if (props_SendPoint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SendPoint = cpb.create();
        }
        return props_SendPoint;
      case LanguageConceptSwitch.SendPointAddress:
        if (props_SendPointAddress == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SendPointAddress");
          props_SendPointAddress = cpb.create();
        }
        return props_SendPointAddress;
      case LanguageConceptSwitch.SendPointBody:
        if (props_SendPointBody == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SendPointBody");
          props_SendPointBody = cpb.create();
        }
        return props_SendPointBody;
      case LanguageConceptSwitch.SendPointButton:
        if (props_SendPointButton == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SendPointButton");
          props_SendPointButton = cpb.create();
        }
        return props_SendPointButton;
      case LanguageConceptSwitch.SendPointMethod:
        if (props_SendPointMethod == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SendPointMethod = cpb.create();
        }
        return props_SendPointMethod;
      case LanguageConceptSwitch.SendPointParameter:
        if (props_SendPointParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SendPointParameter = cpb.create();
        }
        return props_SendPointParameter;
      case LanguageConceptSwitch.SendPointPathVariable:
        if (props_SendPointPathVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SendPointPathVariable = cpb.create();
        }
        return props_SendPointPathVariable;
      case LanguageConceptSwitch.SendPointResponseBody:
        if (props_SendPointResponseBody == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SendPointResponseBody");
          props_SendPointResponseBody = cpb.create();
        }
        return props_SendPointResponseBody;
      case LanguageConceptSwitch.SendPointResponseStatus:
        if (props_SendPointResponseStatus == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SendPointResponseStatus");
          props_SendPointResponseStatus = cpb.create();
        }
        return props_SendPointResponseStatus;
    }
    return null;
  }
}
